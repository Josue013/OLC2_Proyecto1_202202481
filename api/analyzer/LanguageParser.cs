//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Language.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace analyzer {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class LanguageParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, INT=56, DECIMAL=57, RUNE=58, STRING=59, 
		BOOL=60, ID=61, WS=62, COMENTARIO=63, COMENTARIO_MULTILINEA=64;
	public const int
		RULE_program = 0, RULE_dcl = 1, RULE_varDcl = 2, RULE_stmt = 3, RULE_forInit = 4, 
		RULE_incdec = 5, RULE_slice1 = 6, RULE_slice2 = 7, RULE_arrayContent = 8, 
		RULE_type = 9, RULE_exprList = 10, RULE_expr = 11, RULE_call = 12;
	public static readonly string[] ruleNames = {
		"program", "dcl", "varDcl", "stmt", "forInit", "incdec", "slice1", "slice2", 
		"arrayContent", "type", "exprList", "expr", "call"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'var'", "'='", "'fmt.Println('", "')'", "'{'", "'}'", "'if'", 
		"'else'", "'switch'", "'case'", "':'", "'default'", "'for'", "','", "':='", 
		"'range'", "'break'", "'continue'", "'return'", "'++'", "'--'", "'[]'", 
		"'['", "']'", "'[][]'", "'int'", "'float64'", "'string'", "'bool'", "'rune'", 
		"'('", "'strconv.Atoi'", "'strconv.ParseFloat'", "'reflect.TypeOf'", "'slices.Index'", 
		"'strings.Join'", "'len'", "'append'", "'-'", "'!'", "'*'", "'/'", "'%'", 
		"'+'", "'+='", "'-='", "'<'", "'<='", "'>'", "'>='", "'=='", "'!='", "'&&'", 
		"'||'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, "INT", "DECIMAL", "RUNE", 
		"STRING", "BOOL", "ID", "WS", "COMENTARIO", "COMENTARIO_MULTILINEA"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Language.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LanguageParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LanguageParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LanguageParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DclContext[] dcl() {
			return GetRuleContexts<DclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DclContext dcl(int i) {
			return GetRuleContext<DclContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 29;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4539632818142856532L) != 0)) {
				{
				{
				State = 26;
				dcl();
				}
				}
				State = 31;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDclContext varDcl() {
			return GetRuleContext<VarDclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt() {
			return GetRuleContext<StmtContext>(0);
		}
		public DclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dcl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DclContext dcl() {
		DclContext _localctx = new DclContext(Context, State);
		EnterRule(_localctx, 2, RULE_dcl);
		int _la;
		try {
			State = 37;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 32;
				varDcl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 33;
				stmt();
				State = 35;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__0) {
					{
					State = 34;
					Match(T__0);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public VarDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDcl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterVarDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitVarDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDclContext varDcl() {
		VarDclContext _localctx = new VarDclContext(Context, State);
		EnterRule(_localctx, 4, RULE_varDcl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 39;
			Match(T__1);
			State = 40;
			Match(ID);
			State = 41;
			type();
			State = 44;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 42;
				Match(T__2);
				State = 43;
				expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtContext : ParserRuleContext {
		public StmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt; } }
	 
		public StmtContext() { }
		public virtual void CopyFrom(StmtContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ForClassicStmtContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ForInitContext forInit() {
			return GetRuleContext<ForInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt() {
			return GetRuleContext<StmtContext>(0);
		}
		public ForClassicStmtContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterForClassicStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitForClassicStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForClassicStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SwitchStmtContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public SwitchStmtContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterSwitchStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitSwitchStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrintStmtContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		public PrintStmtContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterPrintStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitPrintStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IncDecStmtContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public IncdecContext incdec() {
			return GetRuleContext<IncdecContext>(0);
		}
		public IncDecStmtContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterIncDecStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitIncDecStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncDecStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BlockStmtContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public DclContext[] dcl() {
			return GetRuleContexts<DclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DclContext dcl(int i) {
			return GetRuleContext<DclContext>(i);
		}
		public BlockStmtContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterBlockStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitBlockStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForRangeStmtContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(LanguageParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(LanguageParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt() {
			return GetRuleContext<StmtContext>(0);
		}
		public ForRangeStmtContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterForRangeStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitForRangeStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForRangeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForWhileStmtContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt() {
			return GetRuleContext<StmtContext>(0);
		}
		public ForWhileStmtContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterForWhileStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitForWhileStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForWhileStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ContinueStmtContext : StmtContext {
		public ContinueStmtContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterContinueStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitContinueStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfStmtContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public IfStmtContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterIfStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitIfStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprStmtContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ExprStmtContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterExprStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitExprStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BreakStmtContext : StmtContext {
		public BreakStmtContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterBreakStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitBreakStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Slice1xdContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public Slice1Context slice1() {
			return GetRuleContext<Slice1Context>(0);
		}
		public Slice1xdContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterSlice1xd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitSlice1xd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSlice1xd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Slice2xdContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public Slice2Context slice2() {
			return GetRuleContext<Slice2Context>(0);
		}
		public Slice2xdContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterSlice2xd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitSlice2xd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSlice2xd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReturnStmtContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ReturnStmtContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterReturnStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitReturnStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtContext stmt() {
		StmtContext _localctx = new StmtContext(Context, State);
		EnterRule(_localctx, 6, RULE_stmt);
		int _la;
		try {
			State = 125;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				_localctx = new ExprStmtContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 46;
				expr(0);
				}
				break;
			case 2:
				_localctx = new PrintStmtContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 47;
				Match(T__3);
				State = 48;
				exprList();
				State = 49;
				Match(T__4);
				}
				break;
			case 3:
				_localctx = new BlockStmtContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 51;
				Match(T__5);
				State = 55;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4539632818142856532L) != 0)) {
					{
					{
					State = 52;
					dcl();
					}
					}
					State = 57;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 58;
				Match(T__6);
				}
				break;
			case 4:
				_localctx = new IfStmtContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 59;
				Match(T__7);
				State = 60;
				expr(0);
				State = 61;
				stmt();
				State = 64;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
				case 1:
					{
					State = 62;
					Match(T__8);
					State = 63;
					stmt();
					}
					break;
				}
				}
				break;
			case 5:
				_localctx = new SwitchStmtContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 66;
				Match(T__9);
				State = 67;
				expr(0);
				State = 68;
				Match(T__5);
				State = 80;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__10) {
					{
					{
					State = 69;
					Match(T__10);
					State = 70;
					expr(0);
					State = 71;
					Match(T__11);
					State = 75;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4539632818142856532L) != 0)) {
						{
						{
						State = 72;
						stmt();
						}
						}
						State = 77;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					}
					State = 82;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 91;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__12) {
					{
					State = 83;
					Match(T__12);
					State = 84;
					Match(T__11);
					State = 88;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4539632818142856532L) != 0)) {
						{
						{
						State = 85;
						stmt();
						}
						}
						State = 90;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 93;
				Match(T__6);
				}
				break;
			case 6:
				_localctx = new ForWhileStmtContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 95;
				Match(T__13);
				State = 96;
				expr(0);
				State = 97;
				stmt();
				}
				break;
			case 7:
				_localctx = new ForClassicStmtContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 99;
				Match(T__13);
				State = 100;
				forInit();
				State = 101;
				Match(T__0);
				State = 102;
				expr(0);
				State = 103;
				Match(T__0);
				State = 104;
				expr(0);
				State = 105;
				stmt();
				}
				break;
			case 8:
				_localctx = new ForRangeStmtContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 107;
				Match(T__13);
				State = 108;
				Match(ID);
				State = 109;
				Match(T__14);
				State = 110;
				Match(ID);
				State = 111;
				Match(T__15);
				State = 112;
				Match(T__16);
				State = 113;
				expr(0);
				State = 114;
				stmt();
				}
				break;
			case 9:
				_localctx = new IncDecStmtContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 116;
				incdec();
				}
				break;
			case 10:
				_localctx = new Slice1xdContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 117;
				slice1();
				}
				break;
			case 11:
				_localctx = new Slice2xdContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 118;
				slice2();
				}
				break;
			case 12:
				_localctx = new BreakStmtContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 119;
				Match(T__17);
				}
				break;
			case 13:
				_localctx = new ContinueStmtContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 120;
				Match(T__18);
				}
				break;
			case 14:
				_localctx = new ReturnStmtContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 121;
				Match(T__19);
				State = 123;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
				case 1:
					{
					State = 122;
					expr(0);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDclContext varDcl() {
			return GetRuleContext<VarDclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ForInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterForInit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitForInit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForInitContext forInit() {
		ForInitContext _localctx = new ForInitContext(Context, State);
		EnterRule(_localctx, 8, RULE_forInit);
		try {
			State = 129;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 127;
				varDcl();
				}
				break;
			case T__31:
			case T__32:
			case T__33:
			case T__34:
			case T__35:
			case T__36:
			case T__37:
			case T__38:
			case T__39:
			case T__40:
			case INT:
			case DECIMAL:
			case RUNE:
			case STRING:
			case BOOL:
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 128;
				expr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncdecContext : ParserRuleContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		public IncdecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_incdec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterIncdec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitIncdec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncdec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncdecContext incdec() {
		IncdecContext _localctx = new IncdecContext(Context, State);
		EnterRule(_localctx, 10, RULE_incdec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131;
			Match(ID);
			State = 132;
			_localctx.op = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==T__20 || _la==T__21) ) {
				_localctx.op = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Slice1Context : ParserRuleContext {
		public Slice1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_slice1; } }
	 
		public Slice1Context() { }
		public virtual void CopyFrom(Slice1Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class Slice1StmtContext : Slice1Context {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		public Slice1StmtContext(Slice1Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterSlice1Stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitSlice1Stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSlice1Stmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Slice3StmtContext : Slice1Context {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Slice3StmtContext(Slice1Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterSlice3Stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitSlice3Stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSlice3Stmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Slice2StmtContext : Slice1Context {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Slice2StmtContext(Slice1Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterSlice2Stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitSlice2Stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSlice2Stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Slice1Context slice1() {
		Slice1Context _localctx = new Slice1Context(Context, State);
		EnterRule(_localctx, 12, RULE_slice1);
		try {
			State = 153;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				_localctx = new Slice1StmtContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 134;
				Match(ID);
				State = 135;
				Match(T__15);
				State = 136;
				Match(T__22);
				State = 137;
				type();
				State = 138;
				Match(T__5);
				State = 139;
				exprList();
				State = 140;
				Match(T__6);
				}
				break;
			case 2:
				_localctx = new Slice2StmtContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 142;
				Match(T__1);
				State = 143;
				Match(ID);
				State = 144;
				Match(T__22);
				State = 145;
				type();
				}
				break;
			case 3:
				_localctx = new Slice3StmtContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 146;
				Match(ID);
				State = 147;
				Match(T__23);
				State = 148;
				expr(0);
				State = 149;
				Match(T__24);
				State = 150;
				Match(T__2);
				State = 151;
				expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Slice2Context : ParserRuleContext {
		public Slice2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_slice2; } }
	 
		public Slice2Context() { }
		public virtual void CopyFrom(Slice2Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class Slice5StmtContext : Slice2Context {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Slice5StmtContext(Slice2Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterSlice5Stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitSlice5Stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSlice5Stmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Slice4StmtContext : Slice2Context {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayContentContext[] arrayContent() {
			return GetRuleContexts<ArrayContentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayContentContext arrayContent(int i) {
			return GetRuleContext<ArrayContentContext>(i);
		}
		public Slice4StmtContext(Slice2Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterSlice4Stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitSlice4Stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSlice4Stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Slice2Context slice2() {
		Slice2Context _localctx = new Slice2Context(Context, State);
		EnterRule(_localctx, 14, RULE_slice2);
		int _la;
		try {
			State = 182;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				_localctx = new Slice4StmtContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 155;
				Match(ID);
				State = 156;
				Match(T__15);
				State = 157;
				Match(T__25);
				State = 158;
				type();
				State = 159;
				Match(T__5);
				State = 160;
				arrayContent();
				State = 161;
				Match(T__14);
				State = 167;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__5) {
					{
					{
					State = 162;
					arrayContent();
					State = 163;
					Match(T__14);
					}
					}
					State = 169;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 170;
				Match(T__6);
				}
				break;
			case 2:
				_localctx = new Slice5StmtContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 172;
				Match(ID);
				State = 173;
				Match(T__23);
				State = 174;
				expr(0);
				State = 175;
				Match(T__24);
				State = 176;
				Match(T__23);
				State = 177;
				expr(0);
				State = 178;
				Match(T__24);
				State = 179;
				Match(T__2);
				State = 180;
				expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		public ArrayContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayContent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterArrayContent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitArrayContent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayContent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContentContext arrayContent() {
		ArrayContentContext _localctx = new ArrayContentContext(Context, State);
		EnterRule(_localctx, 16, RULE_arrayContent);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 184;
			Match(T__5);
			State = 185;
			exprList();
			State = 186;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 18, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 188;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 4160749568L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterExprList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitExprList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprListContext exprList() {
		ExprListContext _localctx = new ExprListContext(Context, State);
		EnterRule(_localctx, 20, RULE_exprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190;
			expr(0);
			State = 195;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__14) {
				{
				{
				State = 191;
				Match(T__14);
				State = 192;
				expr(0);
				}
				}
				State = 197;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MulDivContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public MulDivContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterMulDiv(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitMulDiv(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulDiv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParensContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ParensContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterParens(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitParens(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParens(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public LogicalContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterLogical(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitLogical(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogical(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(LanguageParser.STRING, 0); }
		public StringContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class JoinCallContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public CallContext call() {
			return GetRuleContext<CallContext>(0);
		}
		public JoinCallContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterJoinCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitJoinCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoinCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(LanguageParser.INT, 0); }
		public IntContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterInt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitInt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParseFloatCallContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public CallContext call() {
			return GetRuleContext<CallContext>(0);
		}
		public ParseFloatCallContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterParseFloatCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitParseFloatCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParseFloatCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LenCallContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public CallContext call() {
			return GetRuleContext<CallContext>(0);
		}
		public LenCallContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterLenCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitLenCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLenCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		public IdentifierContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DecimalContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(LanguageParser.DECIMAL, 0); }
		public DecimalContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterDecimal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitDecimal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecimal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(LanguageParser.BOOL, 0); }
		public BoolContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterBool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitBool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparisonContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ComparisonContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterComparison(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitComparison(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparison(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeOfCallContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public CallContext call() {
			return GetRuleContext<CallContext>(0);
		}
		public TypeOfCallContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterTypeOfCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitTypeOfCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeOfCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CallExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallContext[] call() {
			return GetRuleContexts<CallContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallContext call(int i) {
			return GetRuleContext<CallContext>(i);
		}
		public CallExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterCallExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitCallExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubAssignContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public SubAssignContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterSubAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitSubAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubAssign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Slice6StmtContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Slice6StmtContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterSlice6Stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitSlice6Stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSlice6Stmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ModContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ModContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterMod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitMod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddSubContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public AddSubContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterAddSub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitAddSub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddSub(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelationalContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public RelationalContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterRelational(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitRelational(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelational(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddAssignContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AddAssignContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterAddAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitAddAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddAssign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public NotContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterNot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitNot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Slice7StmtContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Slice7StmtContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterSlice7Stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitSlice7Stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSlice7Stmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IndexCallContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public CallContext call() {
			return GetRuleContext<CallContext>(0);
		}
		public IndexCallContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterIndexCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitIndexCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AssignContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AtoiCallContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public CallContext call() {
			return GetRuleContext<CallContext>(0);
		}
		public AtoiCallContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterAtoiCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitAtoiCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtoiCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NegateContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public NegateContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterNegate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitNegate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IncDecExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public IncdecContext incdec() {
			return GetRuleContext<IncdecContext>(0);
		}
		public IncDecExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterIncDecExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitIncDecExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncDecExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AppendCallContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public CallContext call() {
			return GetRuleContext<CallContext>(0);
		}
		public AppendCallContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterAppendCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitAppendCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAppendCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RuneContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RUNE() { return GetToken(LanguageParser.RUNE, 0); }
		public RuneContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterRune(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitRune(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRune(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 22;
		EnterRecursionRule(_localctx, 22, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 250;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				{
				_localctx = new ParensContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 199;
				Match(T__31);
				State = 200;
				expr(0);
				State = 201;
				Match(T__4);
				}
				break;
			case 2:
				{
				_localctx = new AtoiCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 203;
				Match(T__32);
				State = 204;
				call();
				}
				break;
			case 3:
				{
				_localctx = new ParseFloatCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 205;
				Match(T__33);
				State = 206;
				call();
				}
				break;
			case 4:
				{
				_localctx = new TypeOfCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 207;
				Match(T__34);
				State = 208;
				call();
				}
				break;
			case 5:
				{
				_localctx = new IndexCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 209;
				Match(T__35);
				State = 210;
				call();
				}
				break;
			case 6:
				{
				_localctx = new JoinCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 211;
				Match(T__36);
				State = 212;
				call();
				}
				break;
			case 7:
				{
				_localctx = new LenCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 213;
				Match(T__37);
				State = 214;
				call();
				}
				break;
			case 8:
				{
				_localctx = new AppendCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 215;
				Match(T__38);
				State = 216;
				call();
				}
				break;
			case 9:
				{
				_localctx = new NegateContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 217;
				Match(T__39);
				State = 218;
				expr(24);
				}
				break;
			case 10:
				{
				_localctx = new NotContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 219;
				Match(T__40);
				State = 220;
				expr(23);
				}
				break;
			case 11:
				{
				_localctx = new AddAssignContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 221;
				Match(ID);
				State = 222;
				Match(T__45);
				State = 223;
				expr(19);
				}
				break;
			case 12:
				{
				_localctx = new SubAssignContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 224;
				Match(ID);
				State = 225;
				Match(T__46);
				State = 226;
				expr(18);
				}
				break;
			case 13:
				{
				_localctx = new AssignContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 227;
				Match(ID);
				State = 228;
				((AssignContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==T__2 || _la==T__15) ) {
					((AssignContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 229;
				expr(10);
				}
				break;
			case 14:
				{
				_localctx = new Slice6StmtContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 230;
				Match(ID);
				State = 231;
				Match(T__23);
				State = 232;
				expr(0);
				State = 233;
				Match(T__24);
				}
				break;
			case 15:
				{
				_localctx = new Slice7StmtContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 235;
				Match(ID);
				State = 236;
				Match(T__23);
				State = 237;
				expr(0);
				State = 238;
				Match(T__24);
				State = 239;
				Match(T__23);
				State = 240;
				expr(0);
				State = 241;
				Match(T__24);
				}
				break;
			case 16:
				{
				_localctx = new IntContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 243;
				Match(INT);
				}
				break;
			case 17:
				{
				_localctx = new DecimalContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 244;
				Match(DECIMAL);
				}
				break;
			case 18:
				{
				_localctx = new RuneContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 245;
				Match(RUNE);
				}
				break;
			case 19:
				{
				_localctx = new StringContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 246;
				Match(STRING);
				}
				break;
			case 20:
				{
				_localctx = new BoolContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 247;
				Match(BOOL);
				}
				break;
			case 21:
				{
				_localctx = new IdentifierContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 248;
				Match(ID);
				}
				break;
			case 22:
				{
				_localctx = new IncDecExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 249;
				incdec();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 290;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 288;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
					case 1:
						{
						_localctx = new MulDivContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 252;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 253;
						((MulDivContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__41 || _la==T__42) ) {
							((MulDivContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 254;
						expr(23);
						}
						break;
					case 2:
						{
						_localctx = new ModContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 255;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 256;
						Match(T__43);
						State = 257;
						expr(22);
						}
						break;
					case 3:
						{
						_localctx = new AddSubContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 258;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 259;
						((AddSubContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__39 || _la==T__44) ) {
							((AddSubContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 260;
						expr(21);
						}
						break;
					case 4:
						{
						_localctx = new RelationalContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 261;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 262;
						((RelationalContext)_localctx).op = Match(T__47);
						State = 263;
						expr(18);
						}
						break;
					case 5:
						{
						_localctx = new RelationalContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 264;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 265;
						((RelationalContext)_localctx).op = Match(T__48);
						State = 266;
						expr(17);
						}
						break;
					case 6:
						{
						_localctx = new RelationalContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 267;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 268;
						((RelationalContext)_localctx).op = Match(T__49);
						State = 269;
						expr(16);
						}
						break;
					case 7:
						{
						_localctx = new RelationalContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 270;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 271;
						((RelationalContext)_localctx).op = Match(T__50);
						State = 272;
						expr(15);
						}
						break;
					case 8:
						{
						_localctx = new ComparisonContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 273;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 274;
						((ComparisonContext)_localctx).op = Match(T__51);
						State = 275;
						expr(14);
						}
						break;
					case 9:
						{
						_localctx = new ComparisonContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 276;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 277;
						((ComparisonContext)_localctx).op = Match(T__52);
						State = 278;
						expr(13);
						}
						break;
					case 10:
						{
						_localctx = new LogicalContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 279;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 280;
						((LogicalContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__53 || _la==T__54) ) {
							((LogicalContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 281;
						expr(12);
						}
						break;
					case 11:
						{
						_localctx = new CallExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 282;
						if (!(Precpred(Context, 25))) throw new FailedPredicateException(this, "Precpred(Context, 25)");
						State = 284;
						ErrorHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 283;
								call();
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 286;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
						}
						break;
					}
					} 
				}
				State = 292;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		public CallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallContext call() {
		CallContext _localctx = new CallContext(Context, State);
		EnterRule(_localctx, 24, RULE_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293;
			Match(T__31);
			State = 295;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4539632818141003776L) != 0)) {
				{
				State = 294;
				exprList();
				}
			}

			State = 297;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 11: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 22);
		case 1: return Precpred(Context, 21);
		case 2: return Precpred(Context, 20);
		case 3: return Precpred(Context, 17);
		case 4: return Precpred(Context, 16);
		case 5: return Precpred(Context, 15);
		case 6: return Precpred(Context, 14);
		case 7: return Precpred(Context, 13);
		case 8: return Precpred(Context, 12);
		case 9: return Precpred(Context, 11);
		case 10: return Precpred(Context, 25);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,64,300,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,1,0,5,0,28,8,0,10,0,
		12,0,31,9,0,1,1,1,1,1,1,3,1,36,8,1,3,1,38,8,1,1,2,1,2,1,2,1,2,1,2,3,2,
		45,8,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,5,3,54,8,3,10,3,12,3,57,9,3,1,3,1,3,
		1,3,1,3,1,3,1,3,3,3,65,8,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,5,3,74,8,3,10,3,
		12,3,77,9,3,5,3,79,8,3,10,3,12,3,82,9,3,1,3,1,3,1,3,5,3,87,8,3,10,3,12,
		3,90,9,3,3,3,92,8,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
		3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
		3,3,124,8,3,3,3,126,8,3,1,4,1,4,3,4,130,8,4,1,5,1,5,1,5,1,6,1,6,1,6,1,
		6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,154,
		8,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,5,7,166,8,7,10,7,12,7,169,
		9,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,183,8,7,1,8,1,
		8,1,8,1,8,1,9,1,9,1,10,1,10,1,10,5,10,194,8,10,10,10,12,10,197,9,10,1,
		11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,
		11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,
		11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,
		11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,251,8,11,1,11,1,11,
		1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
		1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
		1,11,1,11,4,11,285,8,11,11,11,12,11,286,5,11,289,8,11,10,11,12,11,292,
		9,11,1,12,1,12,3,12,296,8,12,1,12,1,12,1,12,0,1,22,13,0,2,4,6,8,10,12,
		14,16,18,20,22,24,0,6,1,0,21,22,1,0,27,31,2,0,3,3,16,16,1,0,42,43,2,0,
		40,40,45,45,1,0,54,55,350,0,29,1,0,0,0,2,37,1,0,0,0,4,39,1,0,0,0,6,125,
		1,0,0,0,8,129,1,0,0,0,10,131,1,0,0,0,12,153,1,0,0,0,14,182,1,0,0,0,16,
		184,1,0,0,0,18,188,1,0,0,0,20,190,1,0,0,0,22,250,1,0,0,0,24,293,1,0,0,
		0,26,28,3,2,1,0,27,26,1,0,0,0,28,31,1,0,0,0,29,27,1,0,0,0,29,30,1,0,0,
		0,30,1,1,0,0,0,31,29,1,0,0,0,32,38,3,4,2,0,33,35,3,6,3,0,34,36,5,1,0,0,
		35,34,1,0,0,0,35,36,1,0,0,0,36,38,1,0,0,0,37,32,1,0,0,0,37,33,1,0,0,0,
		38,3,1,0,0,0,39,40,5,2,0,0,40,41,5,61,0,0,41,44,3,18,9,0,42,43,5,3,0,0,
		43,45,3,22,11,0,44,42,1,0,0,0,44,45,1,0,0,0,45,5,1,0,0,0,46,126,3,22,11,
		0,47,48,5,4,0,0,48,49,3,20,10,0,49,50,5,5,0,0,50,126,1,0,0,0,51,55,5,6,
		0,0,52,54,3,2,1,0,53,52,1,0,0,0,54,57,1,0,0,0,55,53,1,0,0,0,55,56,1,0,
		0,0,56,58,1,0,0,0,57,55,1,0,0,0,58,126,5,7,0,0,59,60,5,8,0,0,60,61,3,22,
		11,0,61,64,3,6,3,0,62,63,5,9,0,0,63,65,3,6,3,0,64,62,1,0,0,0,64,65,1,0,
		0,0,65,126,1,0,0,0,66,67,5,10,0,0,67,68,3,22,11,0,68,80,5,6,0,0,69,70,
		5,11,0,0,70,71,3,22,11,0,71,75,5,12,0,0,72,74,3,6,3,0,73,72,1,0,0,0,74,
		77,1,0,0,0,75,73,1,0,0,0,75,76,1,0,0,0,76,79,1,0,0,0,77,75,1,0,0,0,78,
		69,1,0,0,0,79,82,1,0,0,0,80,78,1,0,0,0,80,81,1,0,0,0,81,91,1,0,0,0,82,
		80,1,0,0,0,83,84,5,13,0,0,84,88,5,12,0,0,85,87,3,6,3,0,86,85,1,0,0,0,87,
		90,1,0,0,0,88,86,1,0,0,0,88,89,1,0,0,0,89,92,1,0,0,0,90,88,1,0,0,0,91,
		83,1,0,0,0,91,92,1,0,0,0,92,93,1,0,0,0,93,94,5,7,0,0,94,126,1,0,0,0,95,
		96,5,14,0,0,96,97,3,22,11,0,97,98,3,6,3,0,98,126,1,0,0,0,99,100,5,14,0,
		0,100,101,3,8,4,0,101,102,5,1,0,0,102,103,3,22,11,0,103,104,5,1,0,0,104,
		105,3,22,11,0,105,106,3,6,3,0,106,126,1,0,0,0,107,108,5,14,0,0,108,109,
		5,61,0,0,109,110,5,15,0,0,110,111,5,61,0,0,111,112,5,16,0,0,112,113,5,
		17,0,0,113,114,3,22,11,0,114,115,3,6,3,0,115,126,1,0,0,0,116,126,3,10,
		5,0,117,126,3,12,6,0,118,126,3,14,7,0,119,126,5,18,0,0,120,126,5,19,0,
		0,121,123,5,20,0,0,122,124,3,22,11,0,123,122,1,0,0,0,123,124,1,0,0,0,124,
		126,1,0,0,0,125,46,1,0,0,0,125,47,1,0,0,0,125,51,1,0,0,0,125,59,1,0,0,
		0,125,66,1,0,0,0,125,95,1,0,0,0,125,99,1,0,0,0,125,107,1,0,0,0,125,116,
		1,0,0,0,125,117,1,0,0,0,125,118,1,0,0,0,125,119,1,0,0,0,125,120,1,0,0,
		0,125,121,1,0,0,0,126,7,1,0,0,0,127,130,3,4,2,0,128,130,3,22,11,0,129,
		127,1,0,0,0,129,128,1,0,0,0,130,9,1,0,0,0,131,132,5,61,0,0,132,133,7,0,
		0,0,133,11,1,0,0,0,134,135,5,61,0,0,135,136,5,16,0,0,136,137,5,23,0,0,
		137,138,3,18,9,0,138,139,5,6,0,0,139,140,3,20,10,0,140,141,5,7,0,0,141,
		154,1,0,0,0,142,143,5,2,0,0,143,144,5,61,0,0,144,145,5,23,0,0,145,154,
		3,18,9,0,146,147,5,61,0,0,147,148,5,24,0,0,148,149,3,22,11,0,149,150,5,
		25,0,0,150,151,5,3,0,0,151,152,3,22,11,0,152,154,1,0,0,0,153,134,1,0,0,
		0,153,142,1,0,0,0,153,146,1,0,0,0,154,13,1,0,0,0,155,156,5,61,0,0,156,
		157,5,16,0,0,157,158,5,26,0,0,158,159,3,18,9,0,159,160,5,6,0,0,160,161,
		3,16,8,0,161,167,5,15,0,0,162,163,3,16,8,0,163,164,5,15,0,0,164,166,1,
		0,0,0,165,162,1,0,0,0,166,169,1,0,0,0,167,165,1,0,0,0,167,168,1,0,0,0,
		168,170,1,0,0,0,169,167,1,0,0,0,170,171,5,7,0,0,171,183,1,0,0,0,172,173,
		5,61,0,0,173,174,5,24,0,0,174,175,3,22,11,0,175,176,5,25,0,0,176,177,5,
		24,0,0,177,178,3,22,11,0,178,179,5,25,0,0,179,180,5,3,0,0,180,181,3,22,
		11,0,181,183,1,0,0,0,182,155,1,0,0,0,182,172,1,0,0,0,183,15,1,0,0,0,184,
		185,5,6,0,0,185,186,3,20,10,0,186,187,5,7,0,0,187,17,1,0,0,0,188,189,7,
		1,0,0,189,19,1,0,0,0,190,195,3,22,11,0,191,192,5,15,0,0,192,194,3,22,11,
		0,193,191,1,0,0,0,194,197,1,0,0,0,195,193,1,0,0,0,195,196,1,0,0,0,196,
		21,1,0,0,0,197,195,1,0,0,0,198,199,6,11,-1,0,199,200,5,32,0,0,200,201,
		3,22,11,0,201,202,5,5,0,0,202,251,1,0,0,0,203,204,5,33,0,0,204,251,3,24,
		12,0,205,206,5,34,0,0,206,251,3,24,12,0,207,208,5,35,0,0,208,251,3,24,
		12,0,209,210,5,36,0,0,210,251,3,24,12,0,211,212,5,37,0,0,212,251,3,24,
		12,0,213,214,5,38,0,0,214,251,3,24,12,0,215,216,5,39,0,0,216,251,3,24,
		12,0,217,218,5,40,0,0,218,251,3,22,11,24,219,220,5,41,0,0,220,251,3,22,
		11,23,221,222,5,61,0,0,222,223,5,46,0,0,223,251,3,22,11,19,224,225,5,61,
		0,0,225,226,5,47,0,0,226,251,3,22,11,18,227,228,5,61,0,0,228,229,7,2,0,
		0,229,251,3,22,11,10,230,231,5,61,0,0,231,232,5,24,0,0,232,233,3,22,11,
		0,233,234,5,25,0,0,234,251,1,0,0,0,235,236,5,61,0,0,236,237,5,24,0,0,237,
		238,3,22,11,0,238,239,5,25,0,0,239,240,5,24,0,0,240,241,3,22,11,0,241,
		242,5,25,0,0,242,251,1,0,0,0,243,251,5,56,0,0,244,251,5,57,0,0,245,251,
		5,58,0,0,246,251,5,59,0,0,247,251,5,60,0,0,248,251,5,61,0,0,249,251,3,
		10,5,0,250,198,1,0,0,0,250,203,1,0,0,0,250,205,1,0,0,0,250,207,1,0,0,0,
		250,209,1,0,0,0,250,211,1,0,0,0,250,213,1,0,0,0,250,215,1,0,0,0,250,217,
		1,0,0,0,250,219,1,0,0,0,250,221,1,0,0,0,250,224,1,0,0,0,250,227,1,0,0,
		0,250,230,1,0,0,0,250,235,1,0,0,0,250,243,1,0,0,0,250,244,1,0,0,0,250,
		245,1,0,0,0,250,246,1,0,0,0,250,247,1,0,0,0,250,248,1,0,0,0,250,249,1,
		0,0,0,251,290,1,0,0,0,252,253,10,22,0,0,253,254,7,3,0,0,254,289,3,22,11,
		23,255,256,10,21,0,0,256,257,5,44,0,0,257,289,3,22,11,22,258,259,10,20,
		0,0,259,260,7,4,0,0,260,289,3,22,11,21,261,262,10,17,0,0,262,263,5,48,
		0,0,263,289,3,22,11,18,264,265,10,16,0,0,265,266,5,49,0,0,266,289,3,22,
		11,17,267,268,10,15,0,0,268,269,5,50,0,0,269,289,3,22,11,16,270,271,10,
		14,0,0,271,272,5,51,0,0,272,289,3,22,11,15,273,274,10,13,0,0,274,275,5,
		52,0,0,275,289,3,22,11,14,276,277,10,12,0,0,277,278,5,53,0,0,278,289,3,
		22,11,13,279,280,10,11,0,0,280,281,7,5,0,0,281,289,3,22,11,12,282,284,
		10,25,0,0,283,285,3,24,12,0,284,283,1,0,0,0,285,286,1,0,0,0,286,284,1,
		0,0,0,286,287,1,0,0,0,287,289,1,0,0,0,288,252,1,0,0,0,288,255,1,0,0,0,
		288,258,1,0,0,0,288,261,1,0,0,0,288,264,1,0,0,0,288,267,1,0,0,0,288,270,
		1,0,0,0,288,273,1,0,0,0,288,276,1,0,0,0,288,279,1,0,0,0,288,282,1,0,0,
		0,289,292,1,0,0,0,290,288,1,0,0,0,290,291,1,0,0,0,291,23,1,0,0,0,292,290,
		1,0,0,0,293,295,5,32,0,0,294,296,3,20,10,0,295,294,1,0,0,0,295,296,1,0,
		0,0,296,297,1,0,0,0,297,298,5,5,0,0,298,25,1,0,0,0,22,29,35,37,44,55,64,
		75,80,88,91,123,125,129,153,167,182,195,250,286,288,290,295
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace analyzer
