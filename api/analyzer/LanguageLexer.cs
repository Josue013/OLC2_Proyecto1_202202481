//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Language.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace analyzer {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class LanguageLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, INT=31, DECIMAL=32, 
		RUNE=33, STRING=34, BOOL=35, ID=36, WS=37, COMENTARIO=38, COMENTARIO_MULTILINEA=39;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
		"T__25", "T__26", "T__27", "T__28", "T__29", "INT", "DECIMAL", "RUNE", 
		"STRING", "BOOL", "ID", "WS", "COMENTARIO", "COMENTARIO_MULTILINEA", "ESC_SEQ"
	};


	public LanguageLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public LanguageLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'var'", "'='", "'fmt.Println('", "')'", "'{'", "'}'", "'int'", 
		"'float64'", "'string'", "'bool'", "'rune'", "','", "'('", "'-'", "'!'", 
		"'*'", "'/'", "'%'", "'+'", "'+='", "'-='", "'<'", "'<='", "'>'", "'>='", 
		"'=='", "'!='", "':='", "'&&'", "'||'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, "INT", "DECIMAL", "RUNE", "STRING", 
		"BOOL", "ID", "WS", "COMENTARIO", "COMENTARIO_MULTILINEA"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Language.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LanguageLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,39,271,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,1,0,1,0,1,0,1,0,1,1,1,1,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,5,
		1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,
		8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,12,
		1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,
		1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,24,1,24,
		1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,29,
		1,29,1,29,1,30,4,30,184,8,30,11,30,12,30,185,1,31,4,31,189,8,31,11,31,
		12,31,190,1,31,1,31,4,31,195,8,31,11,31,12,31,196,1,32,1,32,1,32,3,32,
		202,8,32,1,32,1,32,1,33,1,33,1,33,5,33,209,8,33,10,33,12,33,212,9,33,1,
		33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,225,8,34,1,35,
		1,35,5,35,229,8,35,10,35,12,35,232,9,35,1,36,4,36,235,8,36,11,36,12,36,
		236,1,36,1,36,1,37,1,37,1,37,1,37,5,37,245,8,37,10,37,12,37,248,9,37,1,
		37,3,37,251,8,37,1,37,1,37,1,38,1,38,1,38,1,38,5,38,259,8,38,10,38,12,
		38,262,9,38,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,2,246,260,0,40,1,1,
		3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,
		31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,
		55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,
		79,0,1,0,8,1,0,48,57,2,0,39,39,92,92,2,0,34,34,92,92,3,0,65,90,95,95,97,
		122,4,0,48,57,65,90,95,95,97,122,3,0,9,10,13,13,32,32,1,1,10,10,6,0,34,
		34,92,92,98,98,110,110,114,114,116,116,280,0,1,1,0,0,0,0,3,1,0,0,0,0,5,
		1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,
		0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
		1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,
		0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,
		1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,
		0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,
		1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,1,81,1,0,0,0,3,85,1,0,0,
		0,5,87,1,0,0,0,7,100,1,0,0,0,9,102,1,0,0,0,11,104,1,0,0,0,13,106,1,0,0,
		0,15,110,1,0,0,0,17,118,1,0,0,0,19,125,1,0,0,0,21,130,1,0,0,0,23,135,1,
		0,0,0,25,137,1,0,0,0,27,139,1,0,0,0,29,141,1,0,0,0,31,143,1,0,0,0,33,145,
		1,0,0,0,35,147,1,0,0,0,37,149,1,0,0,0,39,151,1,0,0,0,41,154,1,0,0,0,43,
		157,1,0,0,0,45,159,1,0,0,0,47,162,1,0,0,0,49,164,1,0,0,0,51,167,1,0,0,
		0,53,170,1,0,0,0,55,173,1,0,0,0,57,176,1,0,0,0,59,179,1,0,0,0,61,183,1,
		0,0,0,63,188,1,0,0,0,65,198,1,0,0,0,67,205,1,0,0,0,69,224,1,0,0,0,71,226,
		1,0,0,0,73,234,1,0,0,0,75,240,1,0,0,0,77,254,1,0,0,0,79,268,1,0,0,0,81,
		82,5,118,0,0,82,83,5,97,0,0,83,84,5,114,0,0,84,2,1,0,0,0,85,86,5,61,0,
		0,86,4,1,0,0,0,87,88,5,102,0,0,88,89,5,109,0,0,89,90,5,116,0,0,90,91,5,
		46,0,0,91,92,5,80,0,0,92,93,5,114,0,0,93,94,5,105,0,0,94,95,5,110,0,0,
		95,96,5,116,0,0,96,97,5,108,0,0,97,98,5,110,0,0,98,99,5,40,0,0,99,6,1,
		0,0,0,100,101,5,41,0,0,101,8,1,0,0,0,102,103,5,123,0,0,103,10,1,0,0,0,
		104,105,5,125,0,0,105,12,1,0,0,0,106,107,5,105,0,0,107,108,5,110,0,0,108,
		109,5,116,0,0,109,14,1,0,0,0,110,111,5,102,0,0,111,112,5,108,0,0,112,113,
		5,111,0,0,113,114,5,97,0,0,114,115,5,116,0,0,115,116,5,54,0,0,116,117,
		5,52,0,0,117,16,1,0,0,0,118,119,5,115,0,0,119,120,5,116,0,0,120,121,5,
		114,0,0,121,122,5,105,0,0,122,123,5,110,0,0,123,124,5,103,0,0,124,18,1,
		0,0,0,125,126,5,98,0,0,126,127,5,111,0,0,127,128,5,111,0,0,128,129,5,108,
		0,0,129,20,1,0,0,0,130,131,5,114,0,0,131,132,5,117,0,0,132,133,5,110,0,
		0,133,134,5,101,0,0,134,22,1,0,0,0,135,136,5,44,0,0,136,24,1,0,0,0,137,
		138,5,40,0,0,138,26,1,0,0,0,139,140,5,45,0,0,140,28,1,0,0,0,141,142,5,
		33,0,0,142,30,1,0,0,0,143,144,5,42,0,0,144,32,1,0,0,0,145,146,5,47,0,0,
		146,34,1,0,0,0,147,148,5,37,0,0,148,36,1,0,0,0,149,150,5,43,0,0,150,38,
		1,0,0,0,151,152,5,43,0,0,152,153,5,61,0,0,153,40,1,0,0,0,154,155,5,45,
		0,0,155,156,5,61,0,0,156,42,1,0,0,0,157,158,5,60,0,0,158,44,1,0,0,0,159,
		160,5,60,0,0,160,161,5,61,0,0,161,46,1,0,0,0,162,163,5,62,0,0,163,48,1,
		0,0,0,164,165,5,62,0,0,165,166,5,61,0,0,166,50,1,0,0,0,167,168,5,61,0,
		0,168,169,5,61,0,0,169,52,1,0,0,0,170,171,5,33,0,0,171,172,5,61,0,0,172,
		54,1,0,0,0,173,174,5,58,0,0,174,175,5,61,0,0,175,56,1,0,0,0,176,177,5,
		38,0,0,177,178,5,38,0,0,178,58,1,0,0,0,179,180,5,124,0,0,180,181,5,124,
		0,0,181,60,1,0,0,0,182,184,7,0,0,0,183,182,1,0,0,0,184,185,1,0,0,0,185,
		183,1,0,0,0,185,186,1,0,0,0,186,62,1,0,0,0,187,189,7,0,0,0,188,187,1,0,
		0,0,189,190,1,0,0,0,190,188,1,0,0,0,190,191,1,0,0,0,191,192,1,0,0,0,192,
		194,5,46,0,0,193,195,7,0,0,0,194,193,1,0,0,0,195,196,1,0,0,0,196,194,1,
		0,0,0,196,197,1,0,0,0,197,64,1,0,0,0,198,201,5,39,0,0,199,202,3,79,39,
		0,200,202,8,1,0,0,201,199,1,0,0,0,201,200,1,0,0,0,202,203,1,0,0,0,203,
		204,5,39,0,0,204,66,1,0,0,0,205,210,5,34,0,0,206,209,3,79,39,0,207,209,
		8,2,0,0,208,206,1,0,0,0,208,207,1,0,0,0,209,212,1,0,0,0,210,208,1,0,0,
		0,210,211,1,0,0,0,211,213,1,0,0,0,212,210,1,0,0,0,213,214,5,34,0,0,214,
		68,1,0,0,0,215,216,5,116,0,0,216,217,5,114,0,0,217,218,5,117,0,0,218,225,
		5,101,0,0,219,220,5,102,0,0,220,221,5,97,0,0,221,222,5,108,0,0,222,223,
		5,115,0,0,223,225,5,101,0,0,224,215,1,0,0,0,224,219,1,0,0,0,225,70,1,0,
		0,0,226,230,7,3,0,0,227,229,7,4,0,0,228,227,1,0,0,0,229,232,1,0,0,0,230,
		228,1,0,0,0,230,231,1,0,0,0,231,72,1,0,0,0,232,230,1,0,0,0,233,235,7,5,
		0,0,234,233,1,0,0,0,235,236,1,0,0,0,236,234,1,0,0,0,236,237,1,0,0,0,237,
		238,1,0,0,0,238,239,6,36,0,0,239,74,1,0,0,0,240,241,5,47,0,0,241,242,5,
		47,0,0,242,246,1,0,0,0,243,245,9,0,0,0,244,243,1,0,0,0,245,248,1,0,0,0,
		246,247,1,0,0,0,246,244,1,0,0,0,247,250,1,0,0,0,248,246,1,0,0,0,249,251,
		7,6,0,0,250,249,1,0,0,0,251,252,1,0,0,0,252,253,6,37,0,0,253,76,1,0,0,
		0,254,255,5,47,0,0,255,256,5,42,0,0,256,260,1,0,0,0,257,259,9,0,0,0,258,
		257,1,0,0,0,259,262,1,0,0,0,260,261,1,0,0,0,260,258,1,0,0,0,261,263,1,
		0,0,0,262,260,1,0,0,0,263,264,5,42,0,0,264,265,5,47,0,0,265,266,1,0,0,
		0,266,267,6,38,0,0,267,78,1,0,0,0,268,269,5,92,0,0,269,270,7,7,0,0,270,
		80,1,0,0,0,13,0,185,190,196,201,208,210,224,230,236,246,250,260,1,6,0,
		0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace analyzer
